---
## Author
author:
  name: Тойчубекова Асель Нурлановна
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: kulyabov-ds@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Администрирование сетевых подсистем"
subtitle: "Лабораторная работа №1"
license: "CC BY"
---

# Цель работы

Целью данной работы является приобретение практических навыков установки Rocky Linux на виртуальную машину с помощью инструмента Vagrant.

# Задание

1. Сформируйте box-файл с дистрибутивом Rocky Linux для VirtualBox 

2. Запустите виртуальные машины сервера и клиента и убедитесь в их работоспособности.

3. Внесите изменения в настройки загрузки образов виртуальных машин server
и client, добавив пользователя с правами администратора и изменив названия
хостов.

4. Скопируйте необходимые для работы с Vagrant файлы и box-файлы виртуальных
машин на внешний носитель. Используя эти файлы, вы можете попробовать раз-
вернуть виртуальные машины на другом компьютере.

# Теоретическое введение

Vagrant — это инструмент для создания и управления средами виртуальных машин в рамках единого рабочего процесса. Он позволяет автоматизировать процесс развертывания операционной системы и необходимого программного обеспечения, что значительно облегчает настройку и сопровождение виртуальных окружений. Благодаря этому Vagrant широко применяется при разработке, тестировании и обучении, так как позволяет быстро воспроизводить одинаковые среды на разных компьютерах.

Работа Vagrant основывается на нескольких ключевых понятиях. Во-первых, провайдер (provider) — это система виртуализации, с которой взаимодействует Vagrant (например, VirtualBox или VMware). Во-вторых, box-файл (или Vagrant Box) — это образ виртуальной машины с уже установленной операционной системой, который используется как основа для создания новых виртуальных машин. Третьим важным элементом является Vagrantfile — конфигурационный файл на языке Ruby, в котором задаются параметры виртуальной машины: используемый box-файл, сетевые настройки, ресурсы и другие параметры.

Дополнительно для управления версиями и типами провайдеров может использоваться HCL-файл (HashiCorp Configuration Language). Он описывает метаданные установки и облегчает работу с различными образами.

Для работы с Vagrant предусмотрен набор команд, среди которых:

- vagrant init — создание шаблонного файла конфигурации;

- vagrant up — запуск виртуальной машины;

- vagrant halt — остановка виртуальной машины;

- vagrant reload — перезагрузка с применением новых настроек;

- vagrant destroy — удаление виртуальной машины.

Пример конфигурации Vagrantfile показывает, как можно задать имя виртуальной машины, выбрать образ, настроить сетевое взаимодействие и выделить необходимые ресурсы. Таким образом, процесс развертывания становится стандартизированным и повторяемым.

В лабораторной работе также используется сетевая топология, где сервер выполняет функции маршрутизатора и DHCP-сервера. Это позволяет клиентской машине получать доступ в Интернет и автоматически получать IP-адреса во внутренней сети.

# Выполнение лабораторной работы

Для начала лабораторной работы создаю в диске С рабочий каталог work1, в ней подкаталог antoychubekova, и в покаталоге подкаталоги vagrant, packer. ([рис. @fig-001]).

![Созание рабочего каталога и подкаталогов](image/1.png){#fig-001 width=70%}

В созданном рабочем каталоге в подкаталоге packer размещаю образ варианта операционной системы Rocky Linux, Rocky-9.4-x86_64-minimal.iso. ([рис. @fig-002]).

![Добавление образа ОС](image/2.png){#fig-002 width=70%}

В подкаталоге packer помещаю файл vagrant-rocky.pkr.hcl — специальный файл с описанием метаданных по установке дистрибутива на виртуальную машину. Реактирую этот файл как показано в туисе. ([рис. @fig-003]).

![Редактирование подкаталога packer](image/3.png){#fig-003 width=70%}

В подкаталоге packer создаю подкаталог http с файлом ks.cfg — определяет настройки для установки дистрибутива, которые пользователь обычно вводит вручную, в частности настройки языка интерфейса, языковые настройки клавиатуры, тайм-зону, сетевые настройки и т.п. ([рис. @fig-004]).

![Редактирование подкаталога packer и http ](image/4.png){#fig-004 width=70%}

В подкаталоге vagrant помещаю файл Vagrantfile — файл с конфигурацией запуска виртуальных машин — сервера и клиента, с текстом данные в туисе. ([рис. @fig-005]).

![Редактирование подкаталога vagrant ](image/5.png){#fig-005 width=70%}

В подкаталоге vagrant помещаю файл Makefile — набор инструкций для программы make по работе с Vagrant, с текстом данные в туисе. ([рис. @fig-006]).

![Редактирование подкаталога vagrant ](image/6.png){#fig-006 width=70%} 

В этом же рабочем каталоге в подкаталоге vagrant создаю каталог provision с подкаталогами default, server и client, в которых будут размещаться скрипты, изменяющие настройки внутреннего окружения базового (общего) образа виртуальной машины, сервера или клиента соответственно. ([рис. @fig-007]).

![Редактирование подкаталога vagrant ](image/7.png){#fig-007 width=70%} 

В каталогах default, server и client разместите заранее подготовленный скрипт-заглушку 01-dummy.sh (скрипт дан в туисе). ([рис. @fig-008]).

![Редактирование подкаталога vagrant ](image/8.png){#fig-008 width=70%}  

В каталоге default размещаю заранее подготовленный скрипт 01-user.sh по изменению названия виртуальной машины. ([рис. @fig-009]).

![Редактирование подкаталога vagrant ](image/9.png){#fig-009 width=70%}  

В каталоге default размещаю заранее подготовленный скрипт 01-hostname.sh по изменению названия виртуальной машины. ([рис. @fig-010]).

![Редактирование подкаталога vagrant ](image/10.png){#fig-010 width=70%} 

В каталоге server размещаю заранее подготовленный скрипт 02-forward.sh. ([рис. @fig-011]).

![Редактирование подкаталога vagrant ](image/11.png){#fig-011 width=70%} 

В каталоге client размещаю заранее подготовленный скрипт 01-routing.sh. ([рис. @fig-012]).

![Редактирование подкаталога vagrant ](image/12.png){#fig-012 width=70%} 

Используя FAR, перехожу в созданный рабочий каталог с проектом. В этом же каталоге размещаю файл packer.exe. И ввожу команду для начала автоматической установки образа операционной системы Rocky Linux в VirtualBox и последующего формирования box-файла с дистрибутивом Rocky Linux для VirtualBox: packer.exe init vagrant-rocky.pkr.hcl. ([рис. @fig-013]).

![Начало формирования box-файла ](image/13.png){#fig-013 width=70%} 

Далее ввожу команду: packer.exe build vagrant-rocky.pkr.hcl. ([рис. @fig-014]).

![Начало формирования box-файла ](image/14.png){#fig-014 width=70%} 

Процесс установки образа ОС в VirtualBox и последующего формирования box-файла. По окончании процесса в рабочем каталоге сформировался box-файл с названием vagrant-virtualbox-rocky-10-x86_64.box. ([рис. @fig-015], [рис. @fig-016], [рис. @fig-017]).

![Процесс формирования box-файла ](image/15.png){#fig-015 width=70%}

![Процесс формирования box-файла ](image/16.png){#fig-016 width=70%}

![Процесс формирования box-файла ](image/17.png){#fig-017 width=70%}

Для регистрации образа виртуальной машины в vagrant в командной строке ввожу: vagrant box add rockylinux10 vagrant-virtualbox-rocky-10-x86_64.box. ([рис. @fig-018]).

![Регистрации образа виртуальной машины в vagrant ](image/18.png){#fig-018 width=70%} 

Для запуска виртуальной машины Server ввожу в консоли vagrant up server. ([рис. @fig-019]).

![Запуска виртуальной машины Server ](image/19.png){#fig-019 width=70%} 

Для запуска виртуальной машины Client ввожу в консоли vagrant up client. ([рис. @fig-020]).

![Запуска виртуальной машины Client ](image/20.png){#fig-020 width=70%} 

Мы видим, что запуск обеих виртуальных машин прошёл успешно, логинюсь под пользователем vagrant с паролем vagrant в графическом окружении. ([рис. @fig-021], [рис. @fig-022]).

![Логин в Server](image/21.png){#fig-021 width=70%} 

![Логин в Clientr](image/22.png){#fig-022 width=70%} 

Подключаюсь к серверу из консоли, введя:vagrant ssh server, при запроск ввожу пароль vagrant. ([рис. @fig-023]).

![Подключение к серверу](image/23.png){#fig-023 width=70%} 

Перехожу к пользователю antoychubekova. ([рис. @fig-024]).

![Переход к пользователю antoychubekova](image/24.png){#fig-024 width=70%} 

Отлогиниваюсь. ([рис. @fig-025]).

![Выход из пользователя antoychubekova](image/25.png){#fig-025 width=70%} 

Выполняю тоже самое для клиента. ([рис. @fig-026], [рис. @fig-027],[рис. @fig-028]).

![Подключение к клиенту](image/26.png){#fig-026 width=70%} 

![Переход к пользователю antoychubekova](image/27.png){#fig-027 width=70%} 

![Выход из пользователя antoychubekova](image/28.png){#fig-028 width=70%} 

Выключаю обе виртуальные машины. ([рис. @fig-029]).

![Выключение ВМ](image/29.png){#fig-029 width=70%} 

Для отработки созданных скриптов во время загрузки виртуальных машин убедимся, что в конфигурационном файле Vagrantfile до строк с конфигурацией сервера имеется следующая запись:

- Common configuration

- config.vm.provision "common user",

- type: "shell",

- preserve_order: true,

- path: "provision/default/01-user.sh"

- config.vm.provision "common hostname",

- type: "shell",

- preserve_order: true,

- run: "always",

- path: "provision/default/01-hostname.sh"

У меня в Vagrant файле все прописано. ([рис. @fig-030]).

![Выключение ВМ](image/30.png){#fig-030 width=70%} 

Убедимся, что в терминале приглашение отображается в виде antoychubekova@server.antoychubekova.net на сервере
и в виде antoychubekova@client.antoychubekova.net на клиенте. Это видно на ([рис. @fig-024], [рис. @fig-027])

После выключения виртуальных машин скопирую необходимые для работы с Vagrant файлы и box-файлы виртуальных машин на в другой каталог ОС. Используя эти файлы, я могу развернуть виртуальные машины на другом компьютере.  ([рис. @fig-031]).

![Vagrant](image/31.png){#fig-031 width=70%} 


# Выводы

В ходе выполнения лабораторной работы №1 я приобрела практические навыки установки Rocky Linux на виртуальную машину с помощью инструмента Vagrant.


