---
## Author
author:
  name: Тойчубекова Асель Нурлановна
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: kulyabov-ds@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Администрирование сетевых подсистем"
subtitle: "Лабораторная работа №3"
license: "CC BY"
---

# Цель работы

Целью данной лабораторной работы является приобретение практических навыков по установке и конфигурированию DHCP-сервера.

# Теоретическое введение

В современных компьютерных сетях важнейшим элементом является автоматизация процессов настройки сетевых параметров. Одним из ключевых инструментов, обеспечивающих данную задачу, выступает протокол DHCP (Dynamic Host Configuration Protocol). Он реализует модель взаимодействия «клиент–сервер» и позволяет автоматизировать процесс присвоения IP-адресов и сопутствующих параметров рабочим станциям и другим узлам сети.

Использование DHCP избавляет администратора от необходимости ручного конфигурирования сетевых устройств, что значительно снижает вероятность ошибок и облегчает сопровождение сети. Сервер DHCP динамически распределяет IP-адреса из заданного диапазона, контролируемого администратором, и обеспечивает передачу клиентам дополнительных параметров, таких как маска подсети, адрес шлюза по умолчанию, DNS-серверы и имя домена. Взаимодействие клиентов и сервера осуществляется по протоколу UDP: сервер принимает запросы на порту 67 и отправляет ответы клиентам на порт 68.

Для корректного функционирования сети также важен регламент распределения адресов, который позволяет чётко разделить диапазоны IP-адресов по назначению: для шлюзов, сетевого оборудования, серверов, клиентских машин с динамической и статической конфигурацией, а также для принтеров и резервных узлов. Такая схема обеспечивает удобство управления и предотвращает конфликты адресов.

Важной частью работы администратора является диагностика и контроль работы DHCP. Для этого применяются сетевые утилиты:

- ifconfig — инструмент для настройки и просмотра параметров сетевых интерфейсов, позволяющий назначать IP-адреса и проверять их текущее состояние.

- ping — средство проверки доступности сетевых узлов и оценки качества соединения. Оно позволяет измерять время отклика (RTT) и выявлять потери пакетов, что помогает в диагностике перегрузок каналов связи или неисправностей маршрутизаторов.

# Задание

1. Установите на виртуальной машине server DHCP-сервер.

2. Настройте виртуальную машину server в качестве DHCP-сервера для виртуальной внутренней сети .

3. Проверьте корректность работы DHCP-сервера в виртуальной внутренней сети путём запуска виртуальной машины client и применения соответствующих утилит диагностики.

4. Настройте обновление DNS-зоны при появлении в виртуальной внутренней сети новых узлов.

5. Проверьте корректность работы DHCP-сервера и обновления DNS-зоны в виртуальной внутренней сети путём запуска виртуальной машины client и применения соответствующих утилит диагностики.

6. Напишите скрипт для Vagrant, фиксирующий действия по установке и настройке DHCP-сервера во внутреннем окружении виртуальной машины server. Соответствующим образом внести изменения в Vagrantfile.

# Выполнение лабораторной работы

Для начала лабораторной работы запустим вм server. ([рис. @fig-001]).

![  Запуск server ](image/1.png){#fig-001 width=70%}

На вм перейдем в режим суперпользователя и установим dhcp. ([рис. @fig-002]).

![  Установка dhcp ](image/2.png){#fig-002 width=70%}

Сохраним на всякий случай конфигурационный файл. ([рис. @fig-003]).

![  Сохранение конф файла ](image/3.png){#fig-003 width=70%}

Откроем файл /etc/kea/kea-dhcp4.conf на редактирование. В этом файле заменим шаблон для domain-name. ([рис. @fig-004] и [рис. @fig-005] и [рис. @fig-006] ).

![  Редактирование kea-dhcp4.conf ](image/4.png){#fig-004 width=70%}

![  Редактирование kea-dhcp4.conf ](image/5.png){#fig-005 width=70%}

![  Редактирование kea-dhcp4.conf ](image/6.png){#fig-006 width=70%}

На базе одного из приведённых в файле примеров конфигурирования подсети зададим собственную конфигурацию dhcp-сети, задав адрес подсети, диапазон адресов для распределения клиентам, адрес маршрутизатора и broadcast-адре. ([рис. @fig-007]).

![  Редактирование kea-dhcp4.conf ](image/7.png){#fig-007 width=70%} 

Настроим привязку dhcpd к интерфейсу eth1 виртуальной машины server. ([рис. @fig-008]).

![  Настройка привязки dhcp ](image/8.png){#fig-008 width=70%}

Проверим правильность конфигурационного файла. Мы видим, что все корректно отрабатывается.  ([рис. @fig-009]).

![  Проверка работы конф файла ](image/9.png){#fig-009 width=70%}

Перезагрузим конфигурацию dhcpd и разрешим загрузку DHCP-сервера при запуске виртуальной машины server. ([рис. @fig-010]).

![ Перезагрузка конф dhcpd ](image/10.png){#fig-010 width=70%}

Добавим запись для DHCP-сервера в конце файла прямой DNS-зоны /var/named/master/fz/antoychubekova.net. ([рис. @fig-011]).

![ Настройка DHCP-сервера ](image/11.png){#fig-011 width=70%}

И в конце файла обратной зоны /var/named/master/rz/192.168.1. При этом не забудем в обоих файлах изменить серийный номер файла зоны, указав текущую дату в нотации ГГГГММДДВВ. ([рис. @fig-012]).

![ Настройка DHCP-сервера ](image/12.png){#fig-012 width=70%}

Перезапустим named и проверим, что можно обратиться к DHCP-серверу по имени. Мы видим, что все правильно работает и мы можем обратиться к DHCP-серверу. ([рис. @fig-013]).

![ Перезапуск named и проверка обращения к DHCP ](image/13.png){#fig-013 width=70%}

Внесиv изменения в настройки межсетевого экрана узла server, разрешив работу с DHCP.  ([рис. @fig-014] и [рис. @fig-015]  ).

![Настройка межсетевого узла server](image/14.png){#fig-014 width=70%}

![Настройка межсетевого узла server](image/15.png){#fig-015 width=70%}

Восстановим контекст безопасности в SELinux.  ([рис. @fig-016]).

![ Восстановление контекста безопасности ](image/16.png){#fig-016 width=70%}

В дополнительном терминале запустим мониторинг происходящих в системе процессов в реальном времени. ([рис. @fig-017]).

![ Мониторинг процессов в системе ](image/17.png){#fig-017 width=70%}

 В основном рабочем терминале запустим DHCP-сервер. ([рис. @fig-018]).

![ Запуск DHCP ](image/18.png){#fig-018 width=70%}

Запуск DHCP-сервера прошёл успешно, далее не выключая виртуальной машины server и не прерывая на ней мониторинга происходящих в системе процессов, приступим к анализу работы DHCP-сервера на клиенте. Перед запуском виртуальной машины client в каталоге с проектом в вашей операционной системе в подкаталоге vagrant/provision/client создадим файл 01-routing.sh. ([рис. @fig-019]).

![ Файл 01-routing.sh. ](image/19.png){#fig-019 width=70%}

Этот скрипт изменяет настройки NetworkManager так, чтобы весь трафик на виртуальной машине client шёл по умолчанию через интерфейс eth1.

В Vagrantfile подключим этот скрипт в разделе конфигурации для клиента:

- client.vm.provision "client routing",

- type: "shell",

- preserve_order: true,

- run: "always",

- path: "provision/client/01-routing.sh" ([рис. @fig-020]).

![ Редактирование Vagrantfie ](image/20.png){#fig-020 width=70%}

Зафиксируем внесённые изменения для внутренних настроек виртуальной машины client и запустите её. ([рис. @fig-021]).

![ Запуск clien ](image/21.png){#fig-021 width=70%}

После загрузки виртуальной машины client мы видим информацию о работе DHCP-сервера в файле /var/lib/kea/kea-leases4.csv. ([рис. @fig-022]).

![ Информация о работе DHCP ](image/22.png){#fig-022 width=70%}

Тут 

address — выданный клиенту IP-адрес.

hwaddr — MAC-адрес клиента (аппаратный адрес сетевой карты).

client_id — идентификатор клиента DHCP (часто включает MAC).

valid_lifetime — время жизни аренды (в секундах).

expire — время истечения аренды (в формате Unix timestamp).

subnet_id — ID подсети, к которой относится клиент.

fqdn_fwd — был ли выполнен прямой DNS-апдейт (A-запись).

fqdn_rev — был ли выполнен обратный DNS-апдейт (PTR-запись).

hostname — имя хоста клиента.

state — состояние аренды (0 = свободна, 1 = активна и т.д.).

user_context — доп. данные (если настроено).

pool_id — идентификатор пула, из которого выделен адрес.

Пример:

192.168.1.30,08:00:27:24:9e:2b,01:08:00:27:24:9e:2b,3600,1758259100,1,1,1,client.eavernikovskaya.net,0,,0

Клиент с MAC 08:00:27:24:9e:2b получил IP 192.168.1.30.

DHCP Client ID совпадает с MAC.

Время жизни аренды — 3600 секунд (1 час).

Срок истекает в 1758259100.

Подсеть ID = 1.

DNS обновления: прямое (A) и обратное (PTR) выполнены (1,1).

Имя хоста: client.eavernikovskaya.net.

State = 0 → аренда не активна (возможно, освобождена).

Войдим в систему виртуальной машины client под пользователем и откройте терминал. Используя комнаду ifconfig  выведем на экран информацию об имеющихся интерфейсах. ([рис. @fig-023]).

![ Информация об имеющихся интерфейсах ](image/23.png){#fig-023 width=70%}

Интерфейс eth0 – это первая сетевая карта. У неё IPv4-адрес 10.0.2.15 с маской 255.255.255.0 и широковещательным адресом 10.0.2.255. Также есть два IPv6-адреса: один глобальный (fd17:625c:f037:2:...) и один локальный (fe80::...). MAC-адрес карты – 08:00:27:aa:ce:23. Интерфейс активен, принимает и отправляет пакеты без ошибок. Этот интерфейс обычно используется для выхода в интернет через NAT.

Интерфейс eth1 – это вторая сетевая карта. У неё IPv4-адрес 192.168.1.30 с маской 255.255.255.0 и широковещательным адресом 192.168.1.255. IPv6-адрес локальный (fe80::4700:5e3:4c0e:232d). MAC-адрес – 08:00:27:24:9e:2b. Интерфейс также активен, пакеты передаются и принимаются без ошибок. Этот интерфейс используется для связи внутри локальной сети.

Интерфейс lo (loopback) – это виртуальный интерфейс, который нужен для работы самой системы с собой. Его IPv4-адрес – 127.0.0.1 (localhost), IPv6-адрес – ::1. Через него приложения могут обращаться к серверу, минуя сеть.

На машине server посмотрим список выданных адресов. ([рис. @fig-024]).

![ Информация о работе DHCP ](image/24.png){#fig-024 width=70%}

Требуется настроить обновление DNS-зоны при появлении в виртуальной внутренней сети новых узлов. Создадим ключ на сервере с Bind9. ([рис. @fig-025]).

![ Создание ключа на сервере с Bind9 ](image/25.png){#fig-025 width=70%}

Файл /etc/named/keys/dhcp_updater.key выглядит следующим образом. ([рис. @fig-026]).

![ Ключ на сервере с Bind9 ](image/26.png){#fig-026 width=70%}

Поправим права доступа. ([рис. @fig-027]).

![ Изменение прав доступа ](image/27.png){#fig-027 width=70%}

Подключим ключ в файле /etc/named.conf. ([рис. @fig-028]).

![ Подключение ключ ](image/28.png){#fig-028 width=70%}

На виртуальной машине server под пользователем с правами суперпользователя отредактируем файл /etc/named/antoychubekova.net,
разрешив обновление зоны. ([рис. @fig-029]).

![ Разрешение обновление зоны ](image/29.png){#fig-029 width=70%}

Сделаем проверку конфигурационного файла и перезапустим DNS-сервер. ([рис. @fig-030]).

![ Проверка конф файла и перезапуск DNS ](image/30.png){#fig-030 width=70%}

Сформируем ключ для Kea. Файл ключа назовём /etc/kea/tsig-keys.json. Перенесём ключ на сервер Kea DHCP(с файла /etc/named/keys/dhcp_updater.key ) и перепишем его в формате json.([рис. @fig-031]).

![ Формирование ключа для Kea ](image/31.png){#fig-031 width=70%}

Сменим владельца и поправим права доступа ([рис. @fig-032]).

![ Редактирование владельца и прав доступа ](image/32.png){#fig-032 width=70%}

Настройка происходит в файле /etc/kea/kea-dhcp-ddns.conf. ([рис. @fig-033]).

![ Настройка DHCP,DNS ](image/33.png){#fig-033 width=70%}

Изменим владельца файла и проверим файл на наличие возможных синтаксических ошибок. ([рис. @fig-034]).

![ Проверка на наличие синтаксических ошибок ](image/34.png){#fig-034 width=70%}

Запустим службу ddns и проверим статус работы службы, она имеет статус running. ([рис. @fig-035]).

![ Запуск службы ddns и проверка статуса работы ](image/35.png){#fig-035 width=70%}

Внесем изменения в конфигурационный файл /etc/kea/kea-dhcp4.conf, добавив в него разрешение на динамическое обновление DNS-записей с локального узла прямой и обратной зон. ([рис. @fig-036]).

![ Редактирование конф файла kea-dhcp4.conf ](image/36.png){#fig-036 width=70%}

Проверим файл на наличие возможных синтаксических ошибок. Все корректно отрабатывается. ([рис. @fig-037]).

![ Проверка файла на ошибки ](image/37.png){#fig-037 width=70%}

Перезапустим DHCP-сервер и проверим статус. ([рис. @fig-038]).

![ Запуск DHCP и проверка статуса ](image/38.png){#fig-038 width=70%}

На машине client переполучим адрес. ([рис. @fig-039]).

![ Получение адреса клиентом ](image/39.png){#fig-039 width=70%}

В каталоге прямой DNS-зоны /var/named/master/fz появился файл antoychubekova.net.jnl, в котором в бинарном файле автоматически вносятся изменения записей зоны. ([рис. @fig-040]).

![ Файл antoychubekova.net.jnl  ](image/40.png){#fig-040 width=70%}

На виртуальной машине client под наши пользователем откроем терминал и с помощью утилиты dig убедимся в наличии DNS-записи о клиенте в прямой DNS-зоне: dig @192.168.1.1 client.user.net. ([рис. @fig-041]).

![ DNS-записи ](image/41.png){#fig-041 width=70%}

Команда выводит следующие сведения:

Общие сведения о запросе. Используется утилита dig, которая выполняет DNS-запрос к серверу 192.168.1.1. Запрашивалось имя client.antoychubekova.net с типом записи A (IPv4-адрес). Сервер был найден и дал ответ.

Заголовок ответа. В блоке HEADER указано, что запрос выполнен успешно (status: NOERROR). Флаги qr и aa означают, что это ответ (qr) и он авторитетный (aa). Флаги rd и ra показывают, что рекурсия была запрошена и разрешена.

Дополнительные параметры. В секции OPT PSEUDOSECTION видим поддержку расширенного протокола EDNS, максимальный размер пакета 1232 байта. Присутствует cookie для проверки целостности обмена.

Секция вопроса. Здесь повторяется суть запроса: для домена client.antoychubekova.net нужен IPv4-адрес (тип A).

Секция ответа. DNS-сервер вернул запись: client.antoychubekova.net имеет IP-адрес 192.168.1.30. Время жизни записи (TTL) — 1200 секунд.

Дополнительная информация. Запрос выполнился за 11 миллисекунд. Ответ пришёл от сервера 192.168.1.1 по порту 53 (UDP). Время выполнения запроса зафиксировано — Fri Sep 19 21:49:01 UTC 2025. Размер сообщения — 98 байт.

На виртуальной машине server перейдем в каталог для внесения изменений в настройки внутреннего окружения /vagrant/provision/server/, создадим в нём каталог dhcp, в который поместите в соответствующие подкаталоги конфигурационные файлы DHCP. ([рис. @fig-042]).

![ Создание каталога и покаталогов ](image/42.png){#fig-042 width=70%}

Заменим конфигурационные файлы DNS-сервера. ([рис. @fig-043]).

![ Редактирование конфигурационных файлов DNS-сервера](image/43.png){#fig-043 width=70%}

В каталоге /vagrant/provision/server создадим исполняемый файл dhcp.sh. ([рис. @fig-044]).

![ Создание исполняемого файла ](image/44.png){#fig-044 width=70%}

В нем напишем скрипт, по сути, повторяющий произведённые нами действия по установке и настройке DHCP-сервера. ([рис. @fig-045]).

![ Редактирование исполняемого файла ](image/45.png){#fig-045 width=70%}

Для отработки созданного скрипта во время загрузки виртуальной машины server в конфигурационном файле Vagrantfile необходимо добавить в разделе конфигурации для сервера. ([рис. @fig-046]).

![ Редактирование Vagrantfile ](image/46.png){#fig-046 width=70%}

Выключаем виртуальные машины.

# Выводы

В ходе выполнения лабораторной работы №3 я приобрела практические навыки по установке и конфигурированию DHCP-сервера.

# Список литературы

1.  Barr D. Common DNS Operational and Configuration Errors: RFC / RFC Editor. —02/1996. — DOI: 10.17487/rfc1912.

2. Droms R. Dynamic Host Configuration Protocol: RFC / RFC Editor. — 03/1997. — P. 1–45. —DOI: 10.17487/rfc2131.

3. Dynamic Updates in the Domain Name System (DNS UPDATE), RFC 2136: RFC / P. Vixie,S. Thomson, Y. Rekhter, J. Bound; RFC Editor. — 04/1997. — DOI: 10.17487/RFC2136.
