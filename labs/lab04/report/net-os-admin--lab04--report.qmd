---
## Author
author:
  name: Тойчубекова Асель Нурлановна
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: kulyabov-ds@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: "Администрирование сетевых подсистем"
subtitle: "Лабораторная работа №4"
license: "CC BY"
---

# Цель работы

 Приобретение практических навыков по установке и базовому конфигурированию HTTP-сервера Apache.

# Задание

1. Установите необходимые для работы HTTP-сервера пакеты.

2. Запустите HTTP-сервер с базовой конфигурацией и проанализируйте его работу.

3. Настройте виртуальный хостинг.

4. Напишите скрипт для Vagrant, фиксирующий действия по установке и настройке HTTP-сервера во внутреннем окружении виртуальной машины server. Соответствующим образом внесите изменения в Vagrantfile.

# Теоретическое введение

HTTP (HyperText Transfer Protocol) — протокол передачи данных в сети, основанный на модели «клиент–сервер».
Гипертекст — это текст со ссылками на другие записи или страницы.

HTTP-сервер (например, Apache, nginx, Lighttpd) принимает запросы и отправляет ответы. HTTP-клиент (браузер или веб-приложение) отправляет запросы и получает ответы.

В Linux для работы с HTTP используется демон httpd. Основной конфигурационный файл Apache — httpd.conf, где задаются директивы для управления сервером.

# Выполнение лабораторной работы

Для начала лабораторной работы я запускаю вм server. Далее перехожу к моему пользователю и и перехожу в режим суперпользователя. Затем установливаю из репозитория стандартный веб-сервер (HTTP-сервер и утилиты httpd,криптоутилиты и пр.) ([рис. @fig-001] и [рис. @fig-002]  )

![ Установка веб-сервера ](image/1.png){#fig-001 width=70%}
 
![ Установка веб-сервера ](image/2.png){#fig-002 width=70%}

Перейдем в каталог /etc/httpd/conf, там мы видим конфигурационный файл httpd.conf. 

![httpd.conf ](image/3.png){#fig-003 width=70%}

![httpd.conf ](image/4.png){#fig-004 width=70%}
 
В файле httpd.conf описываются основные параметры работы веб-сервера Apache.

Общие параметры сервера

В httpd.conf существуют такие группы настроек:

- ServerRoot — корневой каталог Apache.

- PidFile — файл с идентификатором процесса сервера.

- Timeout — время ожидания ответов.

Сетевые настройки

- Listen — IP-адрес и порт для приёма запросов.

- ServerName — имя сервера (домен или хост).

Документы и каталоги

- DocumentRoot — корневой каталог сайта.

- <Directory> — правила доступа к папкам.

- Alias — создание псевдонимов для каталогов.

Права и безопасность

- AllowOverride — разрешение или запрет использования .htaccess.

- Require — кто может получать доступ (например, all granted или по IP).

Модули

- LoadModule — подключение дополнительных модулей (например, PHP, SSL).

- Логирование

- ErrorLog — файл с ошибками.

- CustomLog — файл с журналом запросов.

Виртуальные хосты

- <VirtualHost> — настройка нескольких сайтов на одном сервере.

Далее перейдем в каталог /etc/httpd/conf.d. Просмотрим все конфигурационные файлы. 

![autoindex.conf](image/5.png){#fig-005 width=70%}
 
![autoindex.conf](image/6.png){#fig-006 width=70%}

Файл autoindex.conf в Apache описывает настройки модуля mod_autoindex, который отвечает за автоматическую генерацию индексных страниц при доступе к директориям без файла index.html или index.php.

Проще говоря, если в папке нет главного файла, Apache покажет список файлов и папок. Этот файл позволяет настроить, как именно будет выглядеть этот список и что будет отображаться.

В autoindex.conf задаются:

Включение/отключение генерации списков каталогов: Options +Indexes

или отключение: Options -Indexes

Формат отображения списков:

FancyIndexing — красивый вывод с иконками и дополнительной информацией.

HeaderName — указание файла, который будет отображаться вверху списка (например, HEADER.html).

ReadmeName — файл с дополнительной информацией внизу списка.

Сортировка и отображение информации о файлах:

IndexOptions — набор опций для вывода:

NameWidth=* — ширина столбца имени файла

SuppressDescription — скрыть описания файлов

SuppressHTMLPreamble — убрать стандартный HTML-шаблон

Иконки для файлов и папок:

Настройка, какие иконки показывать для разных типов файлов (AddIcon, AddIconByEncoding и т.д.)  распиши это в виде абзацев

![fcgid.conf](image/7.png){#fig-007 width=70%}

В этом файле fcgid.conf содержится конфигурация Apache для модуля mod_fcgid, который обеспечивает поддержку FastCGI.

В комментариях указано назначение файла — настройка FastCGI через mod_fcgid и ссылка на документацию.

Строка

AddHandler fcgid-script fcg fcgi fpl

говорит, что файлы с расширениями .fcg, .fcgi и .fpl должны обрабатываться как FastCGI-скрипты.

Далее задаются пути для служебных файлов:

FcgidIPCDir /run/mod_fcgid
FcgidProcessTableFile /run/mod_fcgid/fcgid_shm

FcgidIPCDir — директория для сокетов, через которые Apache взаимодействует с FastCGI-процессами.

FcgidProcessTableFile — файл для хранения таблицы процессов и разделяемой памяти, нужной для работы FastCGI.

Иными словами, этот конфигурационный файл определяет, какие файлы запускать через FastCGI и где хранить служебные данные для обмена между Apache и FastCGI-процессами.

![manual.conf](image/8.png){#fig-008 width=70%}

В файле manual.conf настроен доступ к встроенной документации Apache.

Директива

Alias /manual /usr/share/httpd/manual

указывает, что при обращении к адресу http://localhost/manual/ сервер будет выдавать файлы из каталога /usr/share/httpd/manual.

В блоке <Directory> для этой папки заданы параметры:

Options Indexes — разрешает показ списка файлов, если нет индексной страницы.

AllowOverride None — отключает переопределение настроек через .htaccess.

Require all granted — открывает доступ всем пользователям.

Директива

- RedirectMatch 301 ^/manual/(?:da|de|en|es|fr|ja|ko|pt-br|ru|tr|zh-cn)(/.*)$ "/manual$1"

выполняет перенаправление: если пользователь заходит на документацию с указанием языка (например, /manual/ru/), его перенаправляют на общий путь /manual/....

То есть этот файл отвечает за то, чтобы встроенное руководство Apache было доступно по адресу http://localhost/manual/ и корректно открывалось независимо от выбора языка.

![ssl.conf](image/9.png){#fig-009 width=70%}

Файл ssl.conf — это конфигурация Apache для поддержки SSL/TLS (HTTPS).

В нём указываются:

Включение SSL для виртуального хоста:

<VirtualHost *:443>
    SSLEngine on

Путь к сертификату и приватному ключу:

SSLCertificateFile /etc/pki/tls/certs/server.crt

SSLCertificateKeyFile /etc/pki/tls/private/server.key

(Опционально) цепочка сертификатов:

SSLCertificateChainFile /etc/pki/tls/certs/ca-bundle.crt

Протоколы и шифры, которые разрешены или запрещены:

SSLProtocol all -SSLv2 -SSLv3

SSLCipherSuite HIGH:!aNULL:!MD5

Настройки виртуальных хостов на 443 порту (аналогично httpd.conf, но с поддержкой SSL).

Параметры безопасности, например:

использование только надёжных шифров,

включение HSTS,

запрет слабых протоколов (SSLv2, SSLv3).

Иными словами, ssl.conf определяет, как Apache обслуживает HTTPS-соединения: где взять сертификаты, какие протоколы и шифры использовать и какие сайты слушать на порту 443.

![userdir.conf](image/10.png){#fig-010 width=70%}

Файле userdir.conf задаются параметры работы модуля mod_userdir, который позволяет отображать содержимое личных веб-папок пользователей (обычно ~/public_html) по URL типа http://site/~username/.

Обёртка <IfModule mod_userdir.c> — настройки применяются только если модуль включён.

UserDir disabled — функциональность отключена по умолчанию (чтобы не раскрывать наличие пользователей на системе). В комментариях показано, как её включить: заменить строку на UserDir public_html.

Блок <Directory "/home/*/public_html"> — правила доступа для всех public_html в домашних каталогах:

AllowOverride FileInfo AuthConfig Limit Indexes — какие директивы из .htaccess разрешено переопределять;

Options MultiViews Indexes SymLinks IfOwnerMatch Includes NoExec — набор опций (мультипросмотры, индексирование каталогов, симлинки, включаемые файлы и запрет выполнения бинарников и т.п.);

Require method GET POST OPTIONS — какие HTTP-методы разрешены (здесь только чтение/отправка форм и preflight).

Что обычно ещё указывают в userdir.conf:

Как включить/отключить UserDir глобально или для отдельных пользователей (UserDir disabled, UserDir public_html, или UserDir disabled username).

Путь к пользовательской папке (по умолчанию public_html, можно изменить).

Правила доступа: Require all granted / ограничения по IP / запрет для определённых пользователей.

Какие опции и разрешения действуют в ~/public_html (AllowOverride, Options — часто FollowSymLinks, Indexes или запрет ExecCGI).

Безопасностные настройки: запрет выполнения скриптов, запрет доступа к скрытым файлам, ограничение методов, запрет .htaccess или наоборот — лишь нужные возможности.

Комментарии о рисках (утечка информации о пользователях, безопасность исполнения кода) и примеры включения/выключения.

![ welcome.conf](image/11.png){#fig-011 width=70%}

Файл welcome.conf управляет отображением стандартной стартовой страницы Apache ("Welcome page").
если пользователь заходит на корневой URL (/), а индексного файла нет, сервер отдаст страницу .noindex.html из системного каталога.
разрешает доступ ко всем файлам в каталоге /usr/share/httpd/noindex, где хранится шаблон "Welcome page".
Директивы Alias создают псевдонимы, чтобы сервер мог найти файлы для отображения стандартной страницы:

/.noindex.html → /usr/share/httpd/noindex/index.html` (сама страница приветствия)

/poweredby.png → /usr/share/httpd/icons/apache_pb3.png` (иконка Apache)

/system_noindex_logo.png → /usr/share/httpd/icons/system_noindex_logo.png` (логотип системы).

Внесем изменения в настройки межсетевого экрана узла server, разрешив работу с http. ([рис. @fig-012] и [рис. @fig-013])

![Настройка межсетевого экрана](image/12.png){#fig-012 width=70%}

![Настройка межсетевого экрана ](image/13.png){#fig-013 width=70%}

В дополнительном терминале запустим в режиме реального времени расширенный лог системных сообщений, чтобы проверить корректность работы системы. ([рис. @fig-014])

![Расширенный лог системных сообщений](image/14.png){#fig-014 width=70%}

В первом терминале активируем и запустите HTTP-сервер. ([рис. @fig-015])

![Запуск HTTP-сервера ](image/15.png){#fig-015 width=70%}

Просмотрев расширенный лог системных сообщений, мы видим, что веб-сервер успешно запустился. ([рис. @fig-016])

![Расширенный лог системных сообщений ](image/16.png){#fig-016 width=70%}

Далее запустим вм client. А на вм server просмотрим лог ошибок работы веб-сервера. ([рис. @fig-017])

![Лог ошибок работы веб-сервера ](image/17.png){#fig-017 width=70%}

В логе описан обычный старт Apache: включены suEXEC и SELinux, сервер успешно запущен с указанными модулями и версиями. Ошибок нет, только информационные сообщения о конфигурации.

На виртуальной машине server запустим мониторинг доступа к веб-серверу. ([рис. @fig-018])

![Мониторинг доступа к веб-серверу ](image/18.png){#fig-018 width=70%}

Мониторин показывает историю обращений клиента: какие файлы запрашивались, с какими результатами (код состояния HTTP), размеры ответа и браузер клиента.

На виртуальной машине client запустим браузер и в адресной строке введем 192.168.1.1. Мы видим, что на экране появилась страничка http server test page. ([рис. @fig-019])

![http server test page ](image/19.png){#fig-019 width=70%}

Настроим виртуальный хостинг по двум DNS-адресам: server.antoychubekova.net и www.antoychubekova.net. Остановим работу DNS-сервера для внесения изменений в файлы описания DNS-зон.  ([рис. @fig-020])

![Остановка работы DNS-сервера ](image/20.png){#fig-020 width=70%}

Добавьте запись для HTTP-сервера в конце файла прямой DNS-зоны /var/named/master/fz/antoychubekova.net ([рис. @fig-022]) и  в конце файла обратной зоны /var/named/master/rz/192.168.1. ([рис. @fig-021])

![ Редактирование DNS-зоны ](image/21.png){#fig-021 width=70%}

![ Редактирование обратной DNS-зоны ](image/22.png){#fig-022 width=70%}

Удалим файлы журналов DNS: antoychubekova.net.jnl и 192.168.1.jnl. ([рис. @fig-023])

![ Удаление журналов ](image/23.png){#fig-023 width=70%}

 Перезапустим DNS-сервер. ([рис. @fig-024])

![ Перезапуск DNS-сервера ](image/24.png){#fig-024 width=70%}

В каталоге /etc/httpd/conf.d создайте файлы server.antoychubekova.net.conf и www.antoychubekova.antoychubekova.conf. ([рис. @fig-025])

![ Создание конфигурационных файлов ](image/25.png){#fig-025 width=70%}

Откроем на редактирование файл server.antoychubekova.antoychubekova.conf и внесем некоторые изменения. ([рис. @fig-026])

![ Редактирование server.antoychubekova.net.conf ](image/26.png){#fig-026 width=70%}

Откроем на редактирование файл www.antoychubekova.net.conf и внесем некоторые изменения. ([рис. @fig-027])

![ Редактирование www.antoychubekova.net.conf ](image/27.png){#fig-027 width=70%}

Перейдем в каталог /var/www/html, в котором должны находиться файлы с содержимым (контентом) веб-серверов, и создадим тестовые страницы для виртуальных веб-серверов server.antoychubekova.net и www.antoychubekova.net. 

Для виртуального веб-сервера server.antoychubekova.net. ([рис. @fig-028])

![ Создание тестовой страницы ](image/28.png){#fig-028 width=70%}

Откроем на редактирование файл index.html и внесем следующее содержание: Welcome to the server.antoychubekovar.net server. ([рис. @fig-029])

![ Редактирование index.html ](image/29.png){#fig-029 width=70%}

Для виртуального веб-сервера www.antoychubekova.net. [рис. @fig-030])

![ Создание тестовой страницы ](image/30.png){#fig-030 width=70%}

Откроем на редактирование файл index.html и внесем следующее содержание: Welcome to the www.antoychubekova.net. ([рис. @fig-031])

![ Редактирование index.html ](image/31.png){#fig-031 width=70%}

Скорректируем права доступа в каталог с веб-контентом. Восстановим контекст безопасности в SELinux. Перезапустим HTTP-сервер. ([рис. @fig-032])

![ Запуск HTTP-сервера ](image/32.png){#fig-032 width=70%}

На виртуальной машине client убедимся в корректном доступе к веб-серверу по адресам server.antoychubekova.net и www.antoychubekova.net в адресной строке веб-браузера. Мы видим, что странички успешно открываются. ([рис. @fig-033] и [рис. @fig-034]  )

![ Страница server.antoychubekova.net ](image/33.png){#fig-033 width=70%}

![ Страница www.antoychubekova.net ](image/34.png){#fig-034 width=70%}

На виртуальной машине server перейдем в каталог для внесения изменений в настройки внутреннего окружения /vagrant/provision/server/, создадим в нём каталог http, в который поместим в соответствующие подкаталоги конфигурационные файлы HTTP-сервера. ([рис. @fig-035])

![ Конфигурационные файлы HTTP-сервера ](image/35.png){#fig-035 width=70%}

Заменим конфигурационные файлы DNS-сервера. ([рис. @fig-036])

![ Замена конфигурационных файлов DNS-сервера ](image/36.png){#fig-036 width=70%}

В каталоге /vagrant/provision/server создадим исполняемый файл http.sh. ([рис. @fig-037])

![ Создание исполняемого файла ](image/37.png){#fig-037 width=70%}

Открыв его на редактирование, пропишим в нём скрипт, который по сути, повторяет произведённые нами действия по установке и настройке HTTP-сервера. ([рис. @fig-038])

![ Редактирование исполняемого файла ](image/38.png){#fig-038 width=70%}

Для отработки созданного скрипта во время загрузки виртуальных машин в конфигурационном файле Vagrantfile необходимо добавить в конфигурации сервера следующую запись:

server.vm.provision "server http",

type: "shell",

preserve_order: true,

path: "provision/server/http.sh" ([рис. @fig-039])

![ Редактирование Vagrantfile ](image/39.png){#fig-039 width=70%}

# Вывод

В ходе выполнения лабораторной работы я приобрела практические навыки по установке и базовому конфигурированию HTTP-сервера Apache.
